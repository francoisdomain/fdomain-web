
name: Deploy React Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: npm ci
      - name: Build project
        run: npm run build
      - name: Create .nojekyll file  # Prevents GitHub from ignoring files that begin with an underscore
        run: touch ./dist/.nojekyll

      # Enhanced static page generation for blog posts
      - name: Create static blog pages for SEO
        run: |
          # Create directories for blog posts
          mkdir -p ./dist/blog/everyone-is-a-leader
          mkdir -p ./dist/blog/lead-vs-inspire
          mkdir -p ./dist/blog/licence-to-lead
          
          # Copy index.html to blog directories and rename as 200.html (standard prerender filename)
          cp ./dist/404.html ./dist/blog/everyone-is-a-leader/200.html
          cp ./dist/404.html ./dist/blog/lead-vs-inspire/200.html
          cp ./dist/404.html ./dist/blog/licence-to-lead/200.html
          
          # Also keep index.html in each directory for standard web servers
          cp ./dist/404.html ./dist/blog/everyone-is-a-leader/index.html
          cp ./dist/404.html ./dist/blog/lead-vs-inspire/index.html
          cp ./dist/404.html ./dist/blog/licence-to-lead/index.html
          
          # Copy 404.html to each blog directory to ensure proper handling
          cp ./dist/404.html ./dist/blog/everyone-is-a-leader/404.html
          cp ./dist/404.html ./dist/blog/lead-vs-inspire/404.html
          cp ./dist/404.html ./dist/blog/licence-to-lead/404.html
          
          # Create 200.html at the root for prerender
          cp ./dist/index.html ./dist/200.html
          
          # Create necessary image directories
          mkdir -p ./dist/blog/everyone-is-a-leader/img/blog
          mkdir -p ./dist/blog/lead-vs-inspire/img/blog
          mkdir -p ./dist/blog/licence-to-lead/img/blog
          
          # Copy blog images to ensure they're available in the static paths
          cp ./dist/img/blog/EveryoneLeader.webp ./dist/blog/everyone-is-a-leader/img/blog/
          cp ./dist/img/blog/lead-vs-inspire.webp ./dist/blog/lead-vs-inspire/img/blog/
          cp ./dist/img/blog/licence-to-lead.webp ./dist/blog/licence-to-lead/img/blog/
      
      - name: Debug directory structure
        run: |
          echo "Contents of dist directory:"
          ls -la ./dist
          echo "Contents of blog directory:"
          ls -la ./dist/blog
          echo "Contents of blog/everyone-is-a-leader directory:"
          ls -la ./dist/blog/everyone-is-a-leader
          echo "Contents of blog/everyone-is-a-leader/img/blog directory:"
          ls -la ./dist/blog/everyone-is-a-leader/img/blog 2>/dev/null || echo "Directory not found"
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
